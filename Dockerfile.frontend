# ==== COMMANDS TO RUN FILE ===
# Open integrated terminal for Dockerfile
# docker build -t frontend -f Dockerfile.frontend ./
# docker run -p 8080:8080 frontend
# =============================

# Use an official Node.js image as the base
FROM node:14 as build-stage

# install simple http server for serving static content
# RUN npm install -g http-server

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json to the container
# Copy env to container
COPY ./package*.json ./
COPY .eslintrc.js .eslintrc.js 
COPY babel.config.js babel.config.js
COPY vue.config.js vue.config.js
COPY .env .env

# Install dependencies
RUN npm install

# Copy the rest of the frontend files to the container
COPY ./src ./src
COPY ./Images ./Images

# build app for production with minification
RUN npm run build

# Expose port 8080 (or the port your Vue.js application runs on)
# EXPOSE 8080

# Command to run the Vue.js application as a static application
# CMD [ "http-server", "dist", "-p", "8080", "-P", "http://localhost:8080" ]
# CMD [ "http-server", "dist" ]

# Step 2: Serve stage
FROM nginx:alpine

# Copy the build files to the Nginx html directory
COPY --from=build-stage /app/dist /usr/share/nginx/html
# Expose the port Nginx will listen on
EXPOSE 80

# Start Nginx server
CMD ["nginx", "-g", "daemon off;"]